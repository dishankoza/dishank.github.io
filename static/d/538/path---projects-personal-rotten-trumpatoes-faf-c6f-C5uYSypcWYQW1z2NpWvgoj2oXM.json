{"data":{"mdx":{"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(\"section\", {\n      className: \"blog-section\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Like all great ideas, it started with a tweet.`), React.createElement(\"blockquote\", {\n      className: \"twitter-tweet\",\n      \"data-cards\": \"hidden\",\n      \"data-lang\": \"en\"\n    }, React.createElement(\"p\", {\n      lang: \"en\",\n      dir: \"ltr\"\n    }, \"Every morning I wake up and check if Trump is polling higher or lower than the movie Suicide Squad. It\\u2019s getting close. \", React.createElement(\"a\", {\n      href: \"https://t.co/f9O9NcuUPz\"\n    }, \"pic.twitter.com/f9O9NcuUPz\")), \"\\u2014 PJ Vogt (@PJVogt) \", React.createElement(\"a\", {\n      href: \"https://twitter.com/PJVogt/status/895824447113842689?ref_src=twsrc%5Etfw\"\n    }, \"August 11, 2017\")), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `In an era where everything is rated, from movies to restaurants to `, React.createElement(\"a\", {\n      href: \"https://thewirecutter.com/reviews/best-fidget-spinners/\",\n      target: \"_blank\"\n    }, `fidget spinners`), `, there was something really amusing about comparing apples and oranges, as it were: this brunch spot is about as popular as that pair of headphones; this album is about as popular as that Airbnb host, etc. So, I set out to find a movie that is doing about as well as the president.`), React.createElement(\"div\", {\n      className: \"blog-inset\"\n    }, React.createElement(ZoomImage, {\n      src: index,\n      zoomSrc: indexZoom,\n      alt: \"Rotten Trumpatoes\"\n    }))), React.createElement(\"section\", {\n      className: \"blog-section\"\n    }, React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components,\n      props: {\n        \"id\": \"so-many-apis\"\n      }\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"h2\",\n      props: {\n        \"href\": \"#so-many-apis\",\n        \"aria-label\": \"so many apis permalink\",\n        \"className\": \"anchor\"\n      }\n    }, React.createElement(MDXTag, {\n      name: \"svg\",\n      components: components,\n      parentName: \"a\",\n      props: {\n        \"aria-hidden\": \"true\",\n        \"focusable\": \"false\",\n        \"height\": \"16\",\n        \"version\": \"1.1\",\n        \"viewBox\": \"0 0 16 16\",\n        \"width\": \"16\"\n      }\n    }, React.createElement(MDXTag, {\n      name: \"path\",\n      components: components,\n      parentName: \"svg\",\n      props: {\n        \"fillRule\": \"evenodd\",\n        \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n      }\n    }))), `So many APIs`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `First, I had to figure out how well the president is actually doing. Picking a single one from the tens (maybe hundreds) of different polls, indexes, and surveys turned out to be an impossible task, so I chose the calculations of `, React.createElement(\"a\", {\n      href: \"http://fivethirtyeight.com/\",\n      target: \"_blank\"\n    }, `FiveThirtyEight`), `, which seem to be `, React.createElement(\"a\", {\n      href: \"http://fivethirtyeight.com/features/how-were-tracking-donald-trumps-approval-ratings/\",\n      target: \"_blank\"\n    }, `well reasoned`), ` and attempt to account for all other major polls, with each of those scores weighted based on `, React.createElement(\"a\", {\n      href: \"https://projects.fivethirtyeight.com/pollster-ratings/\",\n      target: \"_blank\"\n    }, `historical accuracy`), `. FiveThirtyEight also updates their rating multiple times a day, which allows for more varied results, which in turn make for a more interesting web experience (since if you check the page at multiple times of the day, the results might differ).`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Next, I tackled the problem of building up a database of movies with their corresponding `, React.createElement(\"a\", {\n      href: \"https://www.rottentomatoes.com/\",\n      target: \"_blank\"\n    }, `Rotten Tomatoes`), ` ratings. The only problem is, there isn’t a publicly accessible API for this information. There is a `, React.createElement(\"a\", {\n      href: \"https://developer.fandango.com/Rotten_Tomatoes\",\n      target: \"_blank\"\n    }, `private API`), ` which developers can apply to access (and I did), but almost 4 months after submitting the application, I still haven’t heard anything back. With further googling, I found two API’s that I combined to do the job: `, React.createElement(\"a\", {\n      href: \"https://www.themoviedb.org/\",\n      target: \"_blank\"\n    }, `The Movie DB`), `, which offers a free `, React.createElement(\"a\", {\n      href: \"https://www.themoviedb.org/documentation/api\",\n      target: \"_blank\"\n    }, `API`), ` with a `, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"className\": \"language-text\"\n      }\n    }, `/discover`), ` endpoint that yields lists of popular movies, but `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `doesn’t`), ` include the RT rating, and `, React.createElement(\"a\", {\n      href: \"http://www.omdbapi.com/\",\n      target: \"_blank\"\n    }, `The Open Movie Database`), ` (OMDb), which doesn’t provide any sort of `, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"className\": \"language-text\"\n      }\n    }, `/discover`), ` feature, but `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `does`), ` include the RT rating for specific movies.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `While FiveThirtyEight gives a rating to the tenth (e.g. 38.7%), RT deals in integers, so I knew I’d have to gather enough movies to cover each possible rating, 0% - 100. (In reality, there’s never going to be anywhere near total consensus, so it’s unlikely that some movies will be used, but hey, with this President you never know.) I also wanted to have enough for each rating that the results were varied, and you could come back to the site and get different results each time. I ended up building a `, React.createElement(\"a\", {\n      href: \"https://github.com/prichey/rottentrumpatoes/blob/master/movies.json\",\n      target: \"_blank\"\n    }, `database`), ` of over 1,800 movies, each with a title, year, RT rating, number of IMDB ratings, and poster image. I ignore movies from this year, since their rating may not be stable yet. Then, for each rating, I select the 20 movies with the most ratings on IMDB (even if a movie is ‘bad’, movies with the most reviews are more likely to be recognizable), and provide one at random that matches the president’s current rating (which is updated every hour).`)), React.createElement(\"section\", {\n      className: \"blog-section\"\n    }, React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components,\n      props: {\n        \"id\": \"dev-niceties\"\n      }\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"h2\",\n      props: {\n        \"href\": \"#dev-niceties\",\n        \"aria-label\": \"dev niceties permalink\",\n        \"className\": \"anchor\"\n      }\n    }, React.createElement(MDXTag, {\n      name: \"svg\",\n      components: components,\n      parentName: \"a\",\n      props: {\n        \"aria-hidden\": \"true\",\n        \"focusable\": \"false\",\n        \"height\": \"16\",\n        \"version\": \"1.1\",\n        \"viewBox\": \"0 0 16 16\",\n        \"width\": \"16\"\n      }\n    }, React.createElement(MDXTag, {\n      name: \"path\",\n      components: components,\n      parentName: \"svg\",\n      props: {\n        \"fillRule\": \"evenodd\",\n        \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n      }\n    }))), `Dev niceties`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `While not publicly accessible, I created a way to manage movies in the DB which allowed me to remove movies from consideration, as well as merely to examine the huge list of movies I created. I decided to remove some movies from the DB that were either unknown, in poor taste, or just weren’t funny. Since my database was a huge JSON file, it was nearly impossible to view in a text editor, but viewing the top results via this interface turned out to be very useful.`), React.createElement(\"div\", {\n      className: \"blog-inset\"\n    }, React.createElement(ZoomImage, {\n      src: movies,\n      zoomSrc: moviesZoom,\n      alt: \"Movies Interface\"\n    })), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `I also made an interface for scraping, which allows you to specify the specific pages of the TMDb `, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"className\": \"language-text\"\n      }\n    }, `/discover`), ` endpoint to scrape (useful if the app crashes, which of course it never did). Using `, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"className\": \"language-text\"\n      }\n    }, `socket.io`), ` I streamed the server results in realtime to the client, so that you can follow along and see progress as the scraper runs, which is helpful as I let it run over the course of 10+ hours.`), React.createElement(\"div\", {\n      className: \"blog-inset\"\n    }, React.createElement(ZoomImage, {\n      src: scrape,\n      zoomSrc: scrapeZoom,\n      alt: \"Scraping Interface\"\n    })), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `I learned a lot working on this project. I combined several disparate API’s (at least 4, by my count), as well as brushed up my scraping skills (most of it done with Google’s newish `, React.createElement(\"a\", {\n      href: \"https://github.com/GoogleChrome/puppeteer\",\n      target: \"_blank\"\n    }, `Puppeteer`), `, which turned out to be a blast to use). After more than a month of working evenings and weekends, I launched the site (via tweet, of course), which, to my surprise, was retweeted by PJ, the originator of the initial idea.`), React.createElement(\"blockquote\", {\n      className: \"twitter-tweet\",\n      \"data-cards\": \"hidden\",\n      \"data-lang\": \"en\"\n    }, React.createElement(\"p\", {\n      lang: \"en\",\n      dir: \"ltr\"\n    }, \"I've spent the last few weekends working on a thing and I'm ready to be done with it, so here you go: \", React.createElement(\"a\", {\n      href: \"https://t.co/XiRh1HsdaU\"\n    }, \"https://t.co/XiRh1HsdaU\"), \" \\uD83C\\uDF88\"), \"\\u2014 Preston Richey (@prestonrichey) \", React.createElement(\"a\", {\n      href: \"https://twitter.com/prestonrichey/status/912454228622397440?ref_src=twsrc%5Etfw\"\n    }, \"September 25, 2017\")), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `All art direction for Rotten Trumpatoes was done by `, React.createElement(\"a\", {\n      href: \"http://www.tanyakarpitskiy.com/\",\n      target: \"_blank\"\n    }, `Tanya Karpitskiy`), `.`)));\n  }\n\n}\nMDXContent.isMDXComponent = true;"},"frontmatter":{"title":"Rotten Trumpatoes","link":"https://rottentrumpatoes.com/","repo":"https://github.com/prichey/rottentrumpatoes","date":"2017","lang":"Node.js"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/projects/personal/rotten-trumpatoes/"}}